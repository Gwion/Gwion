#! coverage for 'int'. (generated by util/coverage.sh)

var int a;

#!testing operator for int and int
{
	var int	variable1;
	var int	variable2;
<<<  variable1+variable2  >>>;
}

#!testing operator for int and int
{
	var int	variable1;
	var int	variable2;
<<<  variable1-variable2  >>>;
}

#!testing operator for int and int
{
	var int	variable1;
	var int	variable2;
<<<  variable1*variable2  >>>;
}

#!testing operator for int and int
{
	var int	variable1;
	1 :=> var int	variable2;
<<<  variable1/variable2  >>>;
}

#!testing operator for int and int
{
	var int	variable1;
	1 :=> var int	variable2;
<<<  variable1%variable2  >>>;
}

#!testing operator for int and int
{
	var int	variable1;
	var int	variable2;
<<<  variable1&&variable2  >>>;
}

#!testing operator for int and int
{
	var int	variable1;
	var int	variable2;
<<<  variable1||variable2  >>>;
}

#!testing operator for int and int
{
	var int	variable1;
	var int	variable2;
<<<  variable1==variable2  >>>;
}

#!testing operator for int and int
{
	var int	variable1;
	var int	variable2;
<<<  variable1!=variable2  >>>;
}

#!testing operator for int and int
{
	var int	variable1;
	var int	variable2;
<<<  variable1>variable2  >>>;
}

#!testing operator for int and int
{
	var int	variable1;
	var int	variable2;
<<<  variable1>=variable2  >>>;
}

#!testing operator for int and int
{
	var int	variable1;
	var int	variable2;
<<<  variable1<variable2  >>>;
}

#!testing operator for int and int
{
	var int	variable1;
	var int	variable2;
<<<  variable1<=variable2  >>>;
}

#!testing operator for int and int
{
	var int	variable1;
	var int	variable2;
<<<  variable1>>variable2  >>>;
}

#!testing operator for int and int
{
	var int	variable1;
	var int	variable2;
<<<  variable1<<variable2  >>>;
}

#!testing operator for int and int
{
	var int	variable1;
	var int	variable2;
<<<  variable1&variable2  >>>;
}

#!testing operator for int and int
{
	var int	variable1;
	var int	variable2;
<<<  variable1|variable2  >>>;
}

#!testing operator for int and int
{
	var int	variable1;
	var int	variable2;
<<<  variable1^variable2  >>>;
}

#!testing operator for  and int
{
	var int	variable2;
<<<  -variable2  >>>;
}

#!testing operator for  and int
{
	var int	variable2;
<<<  !variable2  >>>;
}

#!testing operator for int and 
{
	var int	variable1;
<<<  variable1++  >>>;
}

#!testing operator for  and int
{
	var int	variable2;
<<<  ++variable2  >>>;
}

#!testing operator for int and 
{
	var int	variable1;
<<<  variable1--  >>>;
}

#!testing operator for  and int
{
	var int	variable2;
<<<  --variable2  >>>;
}

#!testing operator for int and int
{
	var int	variable1;
	var int	variable2;
<<<  variable1:=>variable2  >>>;
}

#!testing operator for int and int
{
	var int	variable1;
	var int	variable2;
<<<  variable1+=>variable2  >>>;
}

#!testing operator for int and int
{
	var int	variable1;
	var int	variable2;
<<<  variable1-=>variable2  >>>;
}

#!testing operator for int and int
{
	var int	variable1;
	var int	variable2;
<<<  variable1*=>variable2  >>>;
}

#!testing operator for int and int
{
	1 :=> var int	variable1;
	1 :=> var int	variable2;
<<<  variable1/=>variable2  >>>;
}

#!testing operator for int and int
{
	1 :=> var int	variable1;
	var int	variable2;
<<<  variable1%=>variable2  >>>;
}

#!testing operator for int and int
{
	var int	variable1;
	var int	variable2;
<<<  variable1<<=>variable2  >>>;
}

#!testing operator for int and int
{
	var int	variable1;
	var int	variable2;
<<<  variable1>>=>variable2  >>>;
}

#!testing operator for int and int
{
	var int	variable1;
	var int	variable2;
<<<  variable1&=>variable2  >>>;
}

#!testing operator for int and int
{
	var int	variable1;
	var int	variable2;
<<<  variable1|=>variable2  >>>;
}

#!testing operator for int and int
{
	var int	variable1;
	var int	variable2;
<<<  variable1^=>variable2  >>>;
}
#! testing cmp
